@page "/product"
@using HttpClients.ClientInterfaces
@using Domain.DTOs




@inject IProductService ProductService

<PageTitle>Product</PageTitle>

<h2 class="header2">Add Product</h2>


<div class="form-group">
    <label for="productImgURL">Product Image URL:</label>
    <input id="productImgURL" class="form-control" @bind="ImgURL" />
</div>

<div class="form-group">
    <label for="productColorName">Product Color Name:</label>
    <input id="productColorName" class="form-control" @bind="ColorName" />
</div>

<div class="form-group">
    <label for="productCategory">Product category:</label>
    <input id="productCategory" class="form-control" @bind="Category" />
</div>

<div class="form-group">
    <label for="productAmount">Product Amount:</label>
    <input id="productAmount" type="number" class="form-control" @bind="Amount" />
</div>

<div class="form-group">
    <label for="productPrice">Product Price:</label>
    <input id="productPrice" type="number" class="form-control" @bind="Price" />
</div>

<div class="form-group">
    <label for="productDate">Product Date:</label>
    <input id="productDate" type="date" class="form-control" @bind="expireDate" />
</div>

<div class="form-group">
    <label for="productSurface">Product Surface:</label>
    <input id="productSurface"  class="form-control" @bind="Surface" />
</div>

<div class="form-group">
    <label for="productShine">Product Shine:</label>
    <input id="productShine"  class="form-control" @bind="Shine" />
</div>

<button class="btn btn-primary" @onclick="CreateProduct">Add Product</button>

<h2 class="header2">Your Products</h2>

@if (createdProducts != null && createdProducts.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Image URL</th>
            <th>Color Name</th>
            <th>Category</th>
            <th>Amount</th>
            <th>Price</th>
            <th>ExpireDate</th>
            <th>Surface</th>
            <th>Shine</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in createdProducts)
        {
            <tr>
                <td>
                    @if (!string.IsNullOrEmpty(product.IMGUrl))
                    {
                        <img src="@product.IMGUrl" alt="Product Image" style="max-width: 100px; max-height: 100px;"/>
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>@product.ColorName</td>
                <td>@product.Category</td>
                <td>@product.Amount</td>
                <td>@product.Price</td>
                <td>@product.ExpireDate</td>
                <td>@product.Surface</td>
                <td>@product.Shine</td>
            </tr>
        }
        </tbody>
    </table>
}
<h2 class="header2">Product List</h2>

@if (products != null && products.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Image URL</th>
            <th>Color Name</th>
            <th>Category</th>
            <th>Amount</th>
            <th>Price</th>
            <th>ExpireDate</th>
            <th>Surface</th>
            <th>Shine</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>
                    @if (!string.IsNullOrEmpty(product.IMGUrl))
                    {
                        <img src="@product.IMGUrl" alt="Product Image" style="max-width: 100px; max-height: 100px;" />
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>@product.ColorName</td>
                <td>@product.Category</td>
                <td>@product.Amount</td>
                <td>@product.Price</td>
                <td>@product.ExpireDate</td>
                <td>@product.Surface</td>
                <td>@product.Shine</td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="()=>loadMore()">More Products</button>
}
else
{
    <p>No products available.</p>
}



@code {
    private string ImgURL = "";
    private string ColorName = "";
    private string Category = "";
    private double Amount = 0;
    private double Price = 0;
    private DateOnly expireDate;
    private string Surface;
    private string Shine;
    private List<Domain.Models.Product> products = new List<Domain.Models.Product>();
    private List<Domain.Models.Product> createdProducts = new List<Domain.Models.Product>();
    private int Index = 1;




    private async Task CreateProduct()
    {
    // Create a ProductCreationDto with the provided values
        ProductCreationDto productCreationDto = new ProductCreationDto(ColorName, Category, Surface, Shine, Amount, Price, expireDate, ImgURL);
        Domain.Models.Product created = await ProductService.CreateAsync(productCreationDto);
    // Call the ProductService.CreateAsync method with the created ProductCreationDto
        createdProducts.Add(created);
    //Resetting Input Fields
        ImgURL = "";
        ColorName = "";
        Category = "";
        Amount = 0;
        Price = 0;
        Surface ="";
        Shine="";
    }

    protected override async Task OnInitializedAsync()
    {
        Index = 1;
        products.AddRange(await Get(null, null, null, 20, Index));
    }

    private async void loadMore()
    {
        Index++;
        products.AddRange(await Get(null, null, null, 20, Index));

    }

    private async Task<List<Domain.Models.Product>> Get(string? category, string? priceStart, string? color, int listSize, int pageNumber)
    {
        try
        {
            ProductListDto dto = new ProductListDto(category, priceStart, color, listSize, pageNumber, null);
            return await ProductService.GetAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw new Exception("No products were found!");
        }

    }

}