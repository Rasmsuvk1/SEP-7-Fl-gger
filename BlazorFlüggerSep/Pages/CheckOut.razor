@page "/CheckOut"
@using HttpClients.ClientInterfaces
@using Domain.DTOs.CustomerDTOS
@using Domain.DTOs.OrderDTOS
@using Domain.Models

@inject NavigationManager NavigationManager
@inject ICustomerService CustomerService
@inject IProductService ProductService
@inject IOrderService OrderService
<h3>CheckOut</h3>

<form id="checkoutForm" @onsubmit="CreateCustomerAsync">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" @bind="Name" required>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" @bind="Email" required>

        <label for="phone">Phone:</label>
        <input type="tel" id="phone" name="phone" @bind="Tlf" required>

        <label for="address">Address:</label>
        <input type="text" id="address" name="address" @bind="Address" required>

        <label for="deliveryMethod">Delivery Method:</label>
        <select id="deliveryMethod" name="deliveryMethod" @bind="DeliveryMethod" required>
            <option value="Shipping">Shipping 2-3 business days</option>
            <option value="Pickup">Pickup at Local Store</option>
        </select>
        
        <a href="/YourBasket"><button class="button">Back</button></a>
        <button type="submit">Submit Order</button>
        @if (!string.IsNullOrEmpty(ItemAdded))
                        {
                            <p class="Itemtext">@ItemAdded</p>
                        }
    </form>

@code {
    //Input
    public static string Name;
    public static string Email;
    private string Tlf;
    public static string Address;
    public static string DeliveryMethod = "Shipping";
    
    // String that is displayed
    private string ItemAdded;
    
    //List of indexes in the basket
    private List<int> productsToUpdate = new List<int>();
    
    private async Task CreateCustomerAsync()
    {
        //Creating customer
        CustomerInfo created = await CustomerService.CreateAsync(new CustomerCreationDto(Name,Email,Tlf,Address));
        //Updating product status
        setIndexes();
        List<int> updated = await ProductService.UpdateSalesStatusAsync(productsToUpdate);
        
        //Order Creation
        OrderCreationDto orderDto = new OrderCreationDto(DateOnly.FromDateTime(DateTime.Now), DeliveryMethod, created, updated);
        Order order = await OrderService.CreateAsync(orderDto);
        
        NavigationManager.NavigateTo("/OrderCompleted");
           
    }
    
    
    // a helper method that gets the indexes from the basket
    private void setIndexes()
    {
        foreach (var product in Basket.ProductsInBasket)
        {
            productsToUpdate.Add(product.ProductId);
        }
    }
}