@using BlazorFlüggerSep.Shared.Components
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces

@inject IProductService ProductService
@inject NavigationManager NavigationManager

@page "/Colors"


<header>
    <h2 class="header2">Colors</h2>
</header>

<div class="filterContainer">
    <h3 class="header3">Filter Items</h3>
    
    <select id="category" class="filter" @bind="_selectedCategory">
        <option value="">All Paints</option>
        <option value="Deal">Deal</option>
        <option value="Room">Room</option>
        <option value="Bathroom">Bathroom</option>
        <option value="Facade">Facade</option>
        <option value="Garage">Garage</option>
        <option value="Wood">Wood</option>
        <option value="Window">Window</option>
    </select>
    <select id="price" class="filter" @bind="_priceFilter">
        <option value="">Sort By Price</option>
        <option value="High">Highest > Lowest</option>
        <option value="Low">Lowest > Highest</option>
    </select>
    <input class ="filterInput" placeholder="Color Name" @bind="_colorName"/>
    <button class="filterButton" @onclick="Filter">Filter</button>
</div>

<section>
    <h3 class="header3"> Our Colors, Your choice</h3>
    <div class="productContainer">
        @if (products != null){
        foreach (var p in products)
        {
            
            <ProductCard
                Index=@p.ProductId
                ImgURL=@p.IMGUrl 
                ColorName=@p.ColorName
                Amount=@p.Amount
                Price=@p.Price
                Date=@p.ExpireDate
                Category=@p.Category
                Surface=@p.Surface
                Shine=@p.Shine
                />
        }
            if (showLoadButton && products.Count % 10 == 0)
            {
                <div class="filterButtonContainer"><button class="paintButton filterButton" @onclick="addProducts">More Paint</button></div>
            }
            
        }
        else
        {
            <h3 class="header3">Loading...</h3>
        }

    </div>


</section>
  <p>&copy; 2023 Flügger Marketplace. All rights reserved.</p>
@code {
        
        private const int ListSize = 10;
    
    public List<Product>? products;
    private string _selectedCategory = "";
    private string _priceFilter = "";
    private string _colorName = "";
    private int index = 1;
    private bool showLoadButton = true;
    
    protected override async Task OnParametersSetAsync()
    {
    // Load initial products without category filter
        products = await Get(null, null, null, ListSize, index);

    // Get the category from the query string
        var uri = new Uri(NavigationManager.Uri);
        _selectedCategory = uri.Query.Contains("category=") ? uri.Query.Split("category=")[1] : string.Empty;

    // If a category is specified, reload the products with the category filter
        if (!string.IsNullOrEmpty(_selectedCategory))
        {
            products = await Get(_selectedCategory, _priceFilter, _colorName, ListSize, index);
        }
    }
    
    

    private async Task<List<Product>> Get(string? category, string? priceStart, string? color, int listSize, int pageNumber)
    {
        try
        {
            ProductListDto dto = new ProductListDto(category,priceStart,color, listSize,pageNumber,null); 
            return await ProductService.GetAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw new Exception("No products were found!");
        }
        
    }

    private async Task addProducts()
    {
        index++;
        try
        {
            List<Product> loaded = await Get(_selectedCategory, _priceFilter, _colorName, ListSize, index);
            if (loaded.Count < ListSize)
            {
                showLoadButton = false;
            }
            products?.AddRange(loaded);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        
    }

    
    private async Task Filter()
    {
        index = 1 ;
        showLoadButton = true;
        try
        {
            products = await Get(_selectedCategory, _priceFilter, _colorName, ListSize, index);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    
    
}